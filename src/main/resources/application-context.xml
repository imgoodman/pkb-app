<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
       default-lazy-init="false" >

    <!-- 读取数据库配置文件，获取基于特定于主机的配置属性 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>

    <!-- 数据源  参数来自上面的配置文件

     其实，也叫数据库连接池（数据源表示），此处是一个比较著名的数据库连接池c3p0
     -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="minPoolSize" value="1" />
        <!--最大是25个连接 -->
        <property name="maxPoolSize" value="25" />
        <property name="initialPoolSize" value="1" />
        <property name="maxIdleTime" value="0" />
        <property name="acquireIncrement" value="5" />
        <property name="maxStatements" value="5000" />
        <property name="idleConnectionTestPeriod" value="60" />
        <property name="acquireRetryAttempts" value="30" />
        <property name="breakAfterAcquireFailure" value="false" />
        <property name="testConnectionOnCheckout" value="false" />
        <property name="testConnectionOnCheckin" value="true" />
    </bean>

    <!-- JDBC的事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">

        <property name="dataSource" ref="dataSource"/>

    </bean>
    <!--mybatis配置-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.i51zhishi.kb.entity"/>
        <property name="configuration">
            <bean class="org.apache.ibatis.session.Configuration">
                <!-- 将数据库带下划线的字段,转为驼峰结构属性名-->
                <property name="mapUnderscoreToCamelCase" value="true"/>
            </bean>
        </property>
        <property name="mapperLocations">
            <list>
                <value>classpath:mybatis/*.xml</value>
            </list>
        </property>
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <value>
                            helperDialect=mysql
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.i51zhishi.kb.mapper"/>
    </bean>

    <!--文件上传-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>
    <!-- 基于注解方式的依赖注入 -->
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />


    <!--使用注解驱动，抛弃了之前的拦截器或AOP配置 -->
    <tx:annotation-driven transaction-manager="transactionManager" />
    <tx:annotation-driven mode="aspectj"/>
    <aop:aspectj-autoproxy/>


</beans>